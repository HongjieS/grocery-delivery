#!/usr/bin/env ruby
# vim: syntax=ruby:expandtab:shiftwidth=2:softtabstop=2:tabstop=2

# Copyright 2013-present Facebook
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'between_meals/util'
require 'between_meals/knife'
require 'between_meals/repo/svn'
require 'between_meals/repo/git'
require 'between_meals/changeset'
require 'grocery_delivery/config'
require 'grocery_delivery/logging'
require 'grocery_delivery/hooks'
require 'optparse'
require 'logger'

# rubocop:disable GlobalVars
$success = false
$status_msg = 'NO WORK DONE'
$lockfileh = nil

def action(msg)
  if GroceryDelivery::Config.dry_run
    GroceryDelivery::Log.warn("[DRYRUN] Would do: #{msg}")
  else
    GroceryDelivery::Log.warn(msg)
  end
end

def get_lock
  GroceryDelivery::Log.warn('Attempting to acquire lock')
  $lockfileh = File.open(GroceryDelivery::Config.lockfile,
                         File::RDWR | File::CREAT, 0o600)
  $lockfileh.flock(File::LOCK_EX)
  GroceryDelivery::Log.warn('Lock acquired')
end

def write_pidfile
  File.write(GroceryDelivery::Config.pidfile, Process.pid)
end

def checkpoint_path
  File.join(GroceryDelivery::Config.master_path,
            GroceryDelivery::Config.rev_checkpoint)
end

def atomic_write(path, content)
  new_path = path + '.new'
  File.write(new_path, content)
  File.rename(new_path, path)
end

def write_checkpoint(rev)
  atomic_write(checkpoint_path, rev) unless GroceryDelivery::Config.dry_run
end

def read_checkpoint
  GroceryDelivery::Log.debug("Reading #{checkpoint_path}")
  return nil unless File.exist?(checkpoint_path)
  checkpoint = File.read(checkpoint_path).strip
  checkpoint.empty? ? nil : checkpoint
end

def full_upload(knife)
  if GroceryDelivery::Config.berks
    GroceryDelivery::Log.warn('Uploading all cookbooks with berkshelf')
    GroceryDelivery::Log.debug(
      "Using cookbook paths: #{GroceryDelivery::Config.cookbook_paths}",
    )
    knife.berks_cookbook_upload_all
  else
    GroceryDelivery::Log.warn('Uploading all cookbooks')
    knife.cookbook_upload_all
  end
  GroceryDelivery::Log.warn('Uploading all roles')
  knife.role_upload_all
  GroceryDelivery::Log.warn('Uploading all databags')
  knife.databag_upload_all
end

def partial_upload(knife, repo, checkpoint, local_head)
  GroceryDelivery::Log.warn(
    "Determining changes... from #{checkpoint} to #{local_head}",
  )

  begin
    changeset = BetweenMeals::Changeset.new(
      GroceryDelivery::Log,
      repo,
      checkpoint,
      local_head,
      {
        :cookbook_dirs =>
          GroceryDelivery::Config.cookbook_paths,
        :role_dir =>
          GroceryDelivery::Config.role_path,
        :databag_dir =>
          GroceryDelivery::Config.databag_path,
      },
      GroceryDelivery::Config.track_symlinks,
    )
  rescue BetweenMeals::Changeset::ReferenceError
    GroceryDelivery::Log.error('Repo error, invalid revision, exiting')
    exit(2)
  end

  deleted_cookbooks = changeset.cookbooks.select { |x| x.status == :deleted }
  added_cookbooks = changeset.cookbooks.select { |x| x.status == :modified }
  deleted_roles = changeset.roles.select { |x| x.status == :deleted }
  added_roles = changeset.roles.select { |x| x.status == :modified }
  deleted_databags = changeset.databags.select { |x| x.status == :deleted }
  added_databags = changeset.databags.select { |x| x.status == :modified }

  {
    'Added cookbooks' => added_cookbooks,
    'Deleted cookbooks' => deleted_cookbooks,
    'Added roles' => added_roles,
    'Deleted roles' => deleted_roles,
    'Added databags' => added_databags,
    'Deleted databags' => deleted_databags,
  }.each do |msg, list|
    if list
      GroceryDelivery::Log.warn("#{msg}: #{list.map(&:to_s)}")
    end
  end

  knife.cookbook_delete(deleted_cookbooks) if deleted_cookbooks
  if added_cookbooks
    if GroceryDelivery::Config.berks
      GroceryDelivery::Log.warn('Using Berkshelf to upload cookbooks')
      knife.berks_cookbook_upload(added_cookbooks)
    else
      knife.cookbook_upload(added_cookbooks)
    end
  end
  knife.role_delete(deleted_roles) if deleted_roles
  knife.role_upload(added_roles) if added_roles
  knife.databag_delete(deleted_databags) if deleted_databags
  knife.databag_upload(added_databags) if added_databags
end

def upload_changed(repo, checkpoint)
  local_head = repo.head_rev
  base_dir = File.join(GroceryDelivery::Config.master_path,
                       GroceryDelivery::Config.reponame)

  knife = BetweenMeals::Knife.new(
    {
      :logger => GroceryDelivery::Log,
      :config => GroceryDelivery::Config.knife_config,
      :bin => GroceryDelivery::Config.knife_bin,
      :berks_bin => GroceryDelivery::Config.berks_bin,
      :berks_config => GroceryDelivery::Config.berks_config,
      :role_dir => File.join(base_dir, GroceryDelivery::Config.role_path),
      :role_type => GroceryDelivery::Config.role_type,
      :cookbook_dirs => GroceryDelivery::Config.cookbook_paths.map do |x|
        File.join(base_dir, x)
      end,
      :databag_dir => File.join(base_dir, GroceryDelivery::Config.databag_path),
    },
  )
  GroceryDelivery::Hooks.pre_upload(
    GroceryDelivery::Config.dry_run, knife, local_head
  )

  if checkpoint
    partial_upload(knife, repo, checkpoint, local_head)
  else
    full_upload(knife)
  end
  return local_head
end

def setup_config
  options = {}
  OptionParser.new do |opts|
    options[:config_file] = GroceryDelivery::Config.config_file
    opts.on('-b',
            '--berks',
            'Use Berkshelf to resolve deps, upload cookbooks.') do |_s|
      options[:berks] = true
    end
    opts.on('-B', '--berks-bin FILE', 'Path to berkshelf binary') do |s|
      options[:berks_bin] = s
    end
    opts.on('--berks-config FILE', 'Path to berkshelf config') do |s|
      options[:berks_config] = s
    end
    opts.on('-c', '--config-file FILE', 'config file') do |s|
      unless File.exist?(File.expand_path(s))
        GroceryDelivery::Log.error("Config file #{s} not found.")
        exit(2)
      end
      options[:config_file] = s
    end
    opts.on('-C',
            '--revision-checkpoint FILE',
            'File with last-uploaded revision, relative to reponame') do |s|
      options[:rev_checkpoint] = s
    end
    opts.on('--cookbook-paths DIRECTORY1 DIRECTORY2 DIRECTORY3 ...',
            Array,
            'Space-delimited dirs array to cookbooks rel to reponame') do |s|
      options[:cookbook_paths] = s
    end
    opts.on('-d', '--databag-path FILE',
            'Directory with databags in relative to reponame') do |s|
      options[:databag_path] = s
    end
    opts.on('-k', '--knife-bin FILE', 'Path to knife') do |s|
      options[:knife_bin] = s
    end
    opts.on('-K',
            '--knife-config FILE',
            'Path to knife config to use for uploads') do |s|
      options[:knife_config] = s
    end
    opts.on('-l', '--lockfile FILE', 'lockfile') do |s|
      options[:lockfile] = s
    end
    opts.on('-m', '--master-path FILE', 'master path') do |s|
      options[:master_path] = s
    end
    opts.on('-n', '--dry-run', 'Dryrun mode') do |_s|
      options[:dry_run] = true
    end
    opts.on('-N',
            '--repo-name FILE',
            'Relative directory to clone to, inside of master_path') do |s|
      options[:reponame] = s
    end
    opts.on('-p', '--pidfile FILE', 'Path to pidfile') do |s|
      options[:pidfile] = s
    end
    opts.on('-P', '--plugin-path FILE', 'Path to plugin file') do |s|
      options[:plugin_path] = s
    end
    opts.on('-r',
            '--role-path FILE',
            'A directory to find roles in relative to reponame') do |s|
      options[:role_path] = s
    end
    opts.on('-R', '--role-type TYPE', 'RB or JSON roles') do |s|
      options[:role_type] = s
    end
    opts.on('--stdout', 'Log to stdout as well.') do |_s|
      options[:stdout] = true
    end
    opts.on('--track-symlinks', 'Track symlinks.') do |_s|
      options[:track_symlinks] = true
    end
    opts.on('-u',
            '--repo-url URL',
            'URL to clone/checkout if it does not exist') do |s|
      options[:repo_url] = s
    end
    opts.on('-U',
            '--no-repo-update',
            'Disable cookbook repo update before run') do |_s|
      options[:repo_update] = false
    end
    opts.on('--vcs-path FILE', 'Path to git or svn binary') do |s|
      options[:vcs_path] = s
    end
    opts.on('--vcs-type TYPE', 'Git or SVN') do |s|
      options[:vcs_type] = s
    end
    opts.on('-v', '--verbosity', 'Verbosity level. Twice for debug.') do
      # If -vv is supplied this block is executed twice
      if options[:verbosity]
        options[:verbosity] = ::Logger::DEBUG
      else
        options[:verbosity] = ::Logger::INFO
      end
    end
  end.parse!
  if File.exist?(File.expand_path(options[:config_file]))
    GroceryDelivery::Config.from_file(options[:config_file])
  end
  GroceryDelivery::Config.merge!(options)
  GroceryDelivery::Log.verbosity = GroceryDelivery::Config.verbosity
  GroceryDelivery::Log.stdout = GroceryDelivery::Config.stdout
  if GroceryDelivery::Config.dry_run
    GroceryDelivery::Log.warn('Dryrun mode activated, no changes will be made.')
  end
  GroceryDelivery::Hooks.get(GroceryDelivery::Config.plugin_path)
  at_exit do
    GroceryDelivery::Hooks.atexit(GroceryDelivery::Config.dry_run,
                                  $success, $status_msg)
  end
end

def get_repo
  repo_path = File.join(GroceryDelivery::Config.master_path,
                        GroceryDelivery::Config.reponame)
  r = BetweenMeals::Repo.get(GroceryDelivery::Config.vcs_type, repo_path,
                             GroceryDelivery::Log)
  if GroceryDelivery::Config.vcs_path
    r.bin = GroceryDelivery::Config.vcs_path
  end
  r
end

setup_config

GroceryDelivery::Hooks.preflight_checks(GroceryDelivery::Config.dry_run)

get_lock
write_pidfile
repo = get_repo

GroceryDelivery::Hooks.prerun(GroceryDelivery::Config.dry_run)

if repo.exists?
  action('Updating repo')
  if GroceryDelivery::Config.repo_update && !GroceryDelivery::Config.dry_run
    repo.update
  end
else
  unless GroceryDelivery::Config.repo_url
    GroceryDelivery::Log.error(
      'No repo URL was specified, and no repo is checked out',
    )
    exit(1)
  end
  action('Cloning repo')
  unless GroceryDelivery::Config.dry_run
    repo.checkout(GroceryDelivery::Config.repo_url)
  end
end

GroceryDelivery::Hooks.post_repo_up(GroceryDelivery::Config.dry_run)

if GroceryDelivery::Config.dry_run && !repo.exists?
  GroceryDelivery::Log.warn(
    'In dryrun mode, with no repo, there\'s not much I can dryrun',
  )
  GroceryDelivery::Hooks.postrun(GroceryDelivery::Config.dry_run, true,
                                 'dryrun mode')
  exit
end

checkpoint = read_checkpoint
if repo.exists? && repo.head_rev == checkpoint
  GroceryDelivery::Log.warn('Repo has not changed, nothing to do...')
  $success = true
  $status_msg = "Success at #{checkpoint}"
else
  begin
    ver = upload_changed(repo, checkpoint)
    write_checkpoint(ver)
    $success = true
    $status_msg = "Success at #{ver}"
  rescue StandardError => e
    $status_msg = e.message
    e.backtrace.each do |line|
      GroceryDelivery::Log.error(line)
    end
  end
end

GroceryDelivery::Log.warn($status_msg)
GroceryDelivery::Hooks.postrun(GroceryDelivery::Config.dry_run, $success,
                               $status_msg)
exit($success)
# rubocop:enable GlobalVars
